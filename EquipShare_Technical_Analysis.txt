# üìã EQUIPSHARE PROJECT - COMPLETE TECHNICAL ANALYSIS FOR VIVA

## üéØ PROJECT OVERVIEW
EquipShare is an ASP.NET Core MVC web application that implements a peer-to-peer equipment rental platform, similar to Airbnb but for physical equipment and tools.

## üèóÔ∏è ARCHITECTURE & DESIGN PATTERN

### 1. ARCHITECTURE OVERVIEW
- **Pattern**: MVC (Model-View-Controller) with Service Layer
- **Technology Stack**:
  - Backend: ASP.NET Core 6.0+ MVC
  - Frontend: Razor Views + Bootstrap 5
  - Database: Entity Framework Core + SQL Server
  - Authentication: Session-based with custom implementation

### 2. PROJECT STRUCTURE ANALYSIS

```
EquipShare/
‚îú‚îÄ‚îÄ Controllers/          # Request handling & business logic coordination
‚îú‚îÄ‚îÄ Models/              # Data models & business entities
‚îÇ   ‚îú‚îÄ‚îÄ ViewModels/      # DTOs for view data transfer
‚îú‚îÄ‚îÄ Services/            # Business logic layer (implements interfaces)
‚îú‚îÄ‚îÄ Views/               # UI presentation layer
‚îÇ   ‚îú‚îÄ‚îÄ Shared/         # Layout views & partials
‚îú‚îÄ‚îÄ wwwroot/            # Static assets (CSS, JS, Images)
‚îú‚îÄ‚îÄ Data/               # Database context & configuration
‚îú‚îÄ‚îÄ Utilities/          # Helper classes (Image upload, Password hash)
‚îî‚îÄ‚îÄ Migrations/         # EF Core database migrations
```

## üíæ DATABASE DESIGN & MODELS

### 1. CORE ENTITIES

#### USER MODEL
```csharp
public class User
{
    public int Id { get; set; }
    public string Email { get; set; }           // Unique, Required
    public string PasswordHash { get; set; }    // Hashed for security
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public string PhoneNumber { get; set; }
    public DateTime CreatedDate { get; set; }
    public virtual ICollection<Equipment> Equipment { get; set; }
}
```

#### EQUIPMENT MODEL
```csharp
public class Equipment
{
    public int Id { get; set; }
    public string Name { get; set; }           // Max 200 chars
    public string Description { get; set; }    // Max 1000 chars
    public decimal PricePerDay { get; set; }   // Decimal precision
    public int CategoryId { get; set; }
    public int OwnerId { get; set; }           // Foreign Key to User
    public string Location { get; set; }       // Max 500 chars
    public bool IsAvailable { get; set; } = true;
    public string ImageUrl { get; set; }       // Multiple images separated by |
    public DateTime CreatedDate { get; set; }

    // Navigation Properties
    public virtual Category Category { get; set; }
    public virtual User Owner { get; set; }
}
```

#### BOOKING MODEL
```csharp
public class Booking
{
    public int Id { get; set; }
    public int EquipmentId { get; set; }
    public int RenterId { get; set; }
    public DateTime StartDate { get; set; }
    public DateTime EndDate { get; set; }
    public decimal TotalPrice { get; set; }
    public decimal PlatformCost { get; set; }      // Commission
    public decimal OwnerReceivableAmount { get; set; }
    public string Status { get; set; } = "Pending"; // Pending/Approved/Rejected/Completed

    // Navigation Properties
    public virtual Equipment Equipment { get; set; }
    public virtual User Renter { get; set; }
}
```

#### CATEGORY MODEL
- Pre-seeded with 8 categories (Construction & Tools, Outdoor & Gardening, etc.)

### 2. DATABASE RELATIONSHIPS
- User ‚Üí Equipment: One-to-Many (User can own multiple equipment)
- Category ‚Üí Equipment: One-to-Many (Category contains multiple equipment)
- User ‚Üí Booking: One-to-Many (User can have multiple bookings as renter)
- Equipment ‚Üí Booking: One-to-Many (Equipment can have multiple bookings)

## üéÆ CONTROLLERS DEEP DIVE

### 1. EQUIPMENTCONTROLLER - KEY IMPLEMENTATION

#### DEPENDENCY INJECTION
```csharp
public class EquipmentController : Controller
{
    private readonly IEquipmentService _equipmentService;
    private readonly IBookingService _bookingService;
    private readonly IWebHostEnvironment _hostingEnvironment;

    public EquipmentController(IEquipmentService equipmentService,
                              IBookingService bookingService,
                              IWebHostEnvironment hostingEnvironment)
    {
        _equipmentService = equipmentService;
        _bookingService = bookingService;
        _hostingEnvironment = hostingEnvironment;
    }
}
```

#### INDEX ACTION - ADVANCED SEARCH & FILTERING
```csharp
public IActionResult Index(string search, int? categoryId, string sort)
{
    var equipment = string.IsNullOrEmpty(search) && !categoryId.HasValue && string.IsNullOrEmpty(sort)
        ? _equipmentService.GetAllEquipment()
        : _equipmentService.SearchAndSortEquipment(search, categoryId, sort);

    ViewBag.SearchQuery = search;
    ViewBag.CategoryId = categoryId;
    ViewBag.SortBy = sort;
    return View(equipment);
}
```

#### CRUD OPERATIONS WITH SECURITY
- Create: Multi-image upload (up to 5 images), ownership validation
- Edit: Owner verification, image replacement logic
- Delete: Confirmation pattern, cascade handling
- Details: Ownership check for UI customization

#### IMAGE MANAGEMENT SYSTEM
```csharp
// Multiple image upload with pipe delimiter storage
string combinedImagePaths = string.Join("|", uploadedImagePaths);
// Storage: "image1.jpg|image2.jpg|image3.jpg"
```

### 2. AUTHENTICATION & SESSION MANAGEMENT

#### SESSION-BASED AUTHENTICATION
```csharp
// Store user ID in session after login
HttpContext.Session.SetInt32("UserId", user.Id);

// Retrieve in controllers
var userId = HttpContext.Session.GetInt32("UserId");
if (!userId.HasValue) return RedirectToAction("Login", "Account");
```

#### SECURITY FEATURES
- Anti-Forgery Tokens: [ValidateAntiForgeryToken] on POST actions
- Ownership Validation: Every sensitive action checks ownership
- Password Hashing: Custom PasswordHasher utility

## üîß SERVICES LAYER ARCHITECTURE

### 1. INTERFACE SEGREGATION PRINCIPLE
```csharp
public interface IEquipmentService
{
    List<Equipment> GetAllEquipment();
    List<Equipment> GetEquipmentByOwner(int ownerId);
    Equipment GetEquipmentById(int id);
    Equipment CreateEquipment(EquipmentViewModel model, int ownerId, string imagePath);
    Equipment UpdateEquipment(EquipmentViewModel model, int ownerId, string imagePath);
    bool DeleteEquipment(int id, int ownerId);
    List<Equipment> SearchEquipment(string query, int? categoryId);
    List<Equipment> SearchAndSortEquipment(string query, int? categoryId, string sortBy);
}
```

### 2. BUSINESS LOGIC IMPLEMENTATION
- SearchAndSortEquipment: Combines LINQ queries for complex filtering
- Image Management: Upload/delete operations with file system
- Validation: Business rules enforcement before database operations

## üé® FRONTEND ARCHITECTURE

### 1. VIEW STRUCTURE
```
Views/
‚îú‚îÄ‚îÄ Shared/
‚îÇ   ‚îú‚îÄ‚îÄ _Layout.cshtml          # Master layout with Bootstrap
‚îÇ   ‚îú‚îÄ‚îÄ _LoginPartial.cshtml    # Navigation with auth state
‚îÇ   ‚îî‚îÄ‚îÄ _ValidationScriptsPartial.cshtml
‚îú‚îÄ‚îÄ Home/                       # Landing pages
‚îú‚îÄ‚îÄ Account/                    # Authentication views
‚îú‚îÄ‚îÄ Equipment/                  # CRUD interfaces
‚îú‚îÄ‚îÄ Booking/                    # Rental management
‚îî‚îÄ‚îÄ Profile/                    # User profile
```

### 2. BOOTSTRAP 5 INTEGRATION
- Responsive Design: Mobile-first approach
- Component Library: Cards, modals, forms, navigation
- Custom Styling: Gradient themes, hover effects
- JavaScript Enhancement: Client-side interactions

## ‚öôÔ∏è CONFIGURATION & SETUP

### 1. DEPENDENCY INJECTION SETUP (STARTUP.CS)
```csharp
public void ConfigureServices(IServiceCollection services)
{
    // MVC Configuration
    services.AddControllersWithViews();

    // Database Context
    services.AddDbContext<ApplicationDbContext>(options =>
        options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection")));

    // Session Management
    services.AddSession(options =>
    {
        options.Cookie.HttpOnly = true;
        options.Cookie.IsEssential = true;
    });

    // Service Registration
    services.AddScoped<IAuthService, AuthService>();
    services.AddScoped<IEquipmentService, EquipmentService>();
    services.AddScoped<IBookingService, BookingService>();
}
```

### 2. DATABASE CONFIGURATION
- Connection String: Stored in appsettings.json
- Entity Framework: Code-First approach with migrations
- Seeded Data: Initial categories pre-populated

## üîí SECURITY IMPLEMENTATION

### 1. AUTHENTICATION FLOW
1. Registration: Password hashing, email validation
2. Login: Credential verification, session creation
3. Authorization: Session-based access control
4. Logout: Session termination

### 2. AUTHORIZATION PATTERNS
- Ownership Checks: Every controller action validates resource ownership
- Session Validation: Consistent user state verification
- Anti-Forgery: CSRF protection on state-changing operations

## üìÅ FILE MANAGEMENT SYSTEM

### 1. IMAGE UPLOAD ARCHITECTURE
```csharp
public class ImageUploader
{
    // Generate unique filename with GUID
    // Validate file type and size
    // Store in wwwroot/images/uploads/
    // Return relative path for database storage
}
```

### 2. MULTI-IMAGE SUPPORT
- Storage Strategy: Pipe-delimited paths in database
- Display Logic: Split and render multiple images
- Management: Upload new, delete old during updates

## üîÑ KEY FEATURES IMPLEMENTATION

### 1. ADVANCED SEARCH & FILTERING
- Multi-parameter Search: Name, description, category
- Sorting Options: Recent, Price (Low-High, High-Low)
- LINQ Implementation: Efficient database queries

### 2. BOOKING SYSTEM
- Date Range Selection: Start and end date validation
- Price Calculation: Automatic total computation
- Status Management: Pending ‚Üí Approved/Rejected ‚Üí Completed
- Owner Dashboard: Booking requests management

### 3. RESPONSIVE DESIGN
- Bootstrap Grid System: Adaptive layouts
- Mobile Optimization: Touch-friendly interfaces
- Cross-browser Compatibility: Modern web standards

## üöÄ DEPLOYMENT & PRODUCTION

### 1. MIGRATION STRATEGY
```powershell
Add-Migration InitialCreate
Update-Database
```

### 2. CONFIGURATION MANAGEMENT
- Development: appsettings.Development.json
- Production: Environment-specific settings
- Connection Strings: Secure storage and retrieval

## üí° KEY TECHNICAL DECISIONS

### 1. WHY ASP.NET CORE MVC?
- Enterprise-grade: Scalable, maintainable architecture
- Razor Views: Type-safe, IntelliSense support
- Built-in Security: CSRF protection, validation

### 2. WHY SESSION-BASED AUTH (NOT IDENTITY)?
- Simplicity: Custom implementation for learning
- Control: Full control over authentication flow
- Lightweight: No external dependencies

### 3. WHY ENTITY FRAMEWORK CORE?
- Code-First: Database evolves with models
- LINQ Support: Type-safe database queries
- Migration System: Version-controlled schema changes

## üîß COMMON VIVA QUESTIONS & ANSWERS

### Q: EXPLAIN THE PROJECT ARCHITECTURE
A: "EquipShare follows MVC architecture with service layer. Controllers handle HTTP requests, Models represent data entities, Views render UI, and Services contain business logic. This separation ensures maintainability and testability."

### Q: HOW DOES AUTHENTICATION WORK?
A: "We use session-based authentication. User credentials are verified, user ID is stored in session, and subsequent requests validate session state. All sensitive operations check both session validity and resource ownership."

### Q: EXPLAIN THE IMAGE UPLOAD SYSTEM
A: "Images are uploaded to wwwroot/images/uploads/ with GUID-based unique names. Multiple image paths are stored as pipe-delimited strings in database. The ImageUploader utility handles validation, storage, and deletion."

### Q: HOW IS THE SEARCH FUNCTIONALITY IMPLEMENTED?
A: "Search uses LINQ queries combining multiple parameters - search term, category filter, and sorting options. The service layer implements SearchAndSortEquipment method for efficient database querying."

### Q: WHAT IS THE BOOKING WORKFLOW?
A: "Users create booking requests with date ranges. Equipment owners receive notifications and can approve/reject. Upon approval, total price is calculated including platform commission. Status progresses from Pending ‚Üí Approved ‚Üí Completed."

## üìä PROJECT HIGHLIGHTS

### TECHNICAL ACHIEVEMENTS:
‚úÖ Complete MVC Architecture Implementation
‚úÖ Multi-image Upload System with File Management
‚úÖ Advanced Search and Filtering with LINQ
‚úÖ Session-based Authentication with Security
‚úÖ Responsive Bootstrap 5 Integration
‚úÖ Entity Framework with Code-First Migrations
‚úÖ Service Layer with Interface Segregation
‚úÖ Comprehensive Error Handling
‚úÖ Mobile-First Responsive Design
‚úÖ RESTful API Design Patterns

### BUSINESS FEATURES:
‚úÖ User Registration and Authentication
‚úÖ Equipment CRUD Operations
‚úÖ Advanced Search and Filtering
‚úÖ Booking System with Status Management
‚úÖ Image Gallery Management
‚úÖ Category-based Organization
‚úÖ Owner/Renter Dashboard
‚úÖ Responsive Web Design

## üéØ VIVA PREPARATION TIPS

1. **Focus on Architecture**: Understand MVC pattern and separation of concerns
2. **Database Knowledge**: Master Entity Framework and relationships
3. **Security Concepts**: Explain session management and validation
4. **Code Flow**: Trace request lifecycle from Controller to Database
5. **Best Practices**: Highlight SOLID principles and clean code
6. **Real-world Application**: Connect technical decisions to business needs

## üìû QUICK REFERENCE

- **Framework**: ASP.NET Core 6.0+ MVC
- **Database**: SQL Server with Entity Framework Core
- **Frontend**: Bootstrap 5 + Razor Views
- **Authentication**: Session-based custom implementation
- **File Storage**: Local file system (wwwroot/images/uploads/)
- **Architecture Pattern**: MVC with Service Layer
- **Development Tool**: Visual Studio 2022

---
Created for EquipShare Viva Preparation
Project by: Ridham Patel
GitHub: https://github.com/RIP31/EquipShare
---